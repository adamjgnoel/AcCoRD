function [hFig, hAxes] = accordVideoMaker(fileToLoad,...
    bMakeVideo, videoName, videoFormat, ...
    curRepeat, scale, observationToPlot, ...
    customFigProp, customAxesProp, customVideoProp, ...
    regionToPlot, customRegionProp, actorToPlot, customActorProp,...
    passiveActorToPlot, molToPlot, customMolProp)
%
% The AcCoRD Simulator
% (Actor-based Communication via Reaction-Diffusion)
%
% Copyright 2016 Adam Noel. All rights reserved.
% 
% For license details, read LICENSE.txt in the root AcCoRD directory
% For user documentation, read README.txt in the root AcCoRD directory
%
% accordVideoMaker.m - Generate a video file from AcCoRD simulation output.
%   Or, generate a sequence of images frp, AcCoRD simulation output
%   Due to the large number of complex input arguments, this function
%   should as specified by the accordVideoMarkerWrapper function or a
%   similarly-structured function or script. Input arguments specify what
%   components of the simulation environment to draw and how, including the
%   regions, actors, and molecules. Inputs also specify how to display the
%   plotting figure and make the video.
%
% INPUTS
% fileToLoad - simulation file generated by accordImport
% bMakeVideo - if true, plot all simulation in a single figure and stich
%   images into a video file. If false, plot each observation in its own
%   figure and include an empty initial figure
% videoName - filename to save the video to
% videoFormat - file format of the video
% curRepeat - index of the simulation realization to plot
% scale - scaling of physical dimensions of region and actor coordinates.
%   Needed to mitigate patch display problems. Recommend that smallest
%   object (non-molecule) to plot has dimension of order 1
% observationToPlot - array of indices of observations to plot. Assume that
%   all actors being displayed make the same number of observations and at
%   the same times
% customFigProp - structure of figure properties to change from AcCoRD
%   defaults. Can be passed as empty if no defaults are to be changed. See
%   accordBuildFigureStruct for structure fields and their default values.
% customAxesProp - structure of axes properties to change from AcCoRD
%   defaults. Can be passed as empty if no defaults are to be changed. See
%   accordBuildAxesStruct for structure fields and their default values.
% customVideoProp - structure of video properties to change from AcCoRD
%   defaults. Can be passed as empty if no defaults are to be changed. See
%   accordInitializeVideo for structure fields and their default values.
% regionToPlot - array of indices of regions to be plotted.
% customRegionProp - structure of region properties to change from AcCoRD
%   defaults. Can be passed as empty if no defaults are to be changed. See
%   accordBuildDispStruct for structure fields and their default values.
% actorToPlot - array of indices of actors to be plotted. Indexing matches
%   the actor list in the original config file and is independent of
%   whether an actor is active or passive. Actors listed here will have
%   their shapes plotted but NOT their molecules (the latter is indicated
%   by the argument "passiveActorToPlot". Actors are drawn after regions,
%   so if an actor is defined by region(s) then it will be drawn on top of
%   its region(s).
% customActorProp - structure of actor properties to change from AcCoRD
%   defaults. Can be passed as empty if no defaults are to be changed. See
%   accordBuildDispStruct for structure fields and their default values.
% passiveActorToPlot - array of indices of passive recording actors whose
%   molecules are to be plotted. Indexing matches the list of passive
%   actors whose observations are recorded (as stored in the data structure
%   in fileToLoad). Actors listed here will NOT have their shapes plotted
%   (use actorToPlot to plot specific actors).
% molToPlot - cell array of arrays of indices of molecules to display. Each
%   cell corresponds to the passive actor specified in passiveActorToPlot.
%   Its array lists the indices of the molecule types of that actor that
%   are to be drawn. The indexing of the actor's array corresponds to the
%   list of molecules that the actor is recording (as stored in the data
%   structure in fileToLoad).
% customMolProp - cell array of structure of molecule properties to change
%   from AcCoRD defaults. Can be passed as empty if no defaults are to be
%   changed. Indexing in this cell array matches that of the molToPlot cell
%   array. See accordBuildMarkerStruct for structure fields and their
%   default values.
%
% OUTPUTS
% hFig - handle(s) to plotted figure(s). Use for making changes.
% hAxes - handle(s) to axes in plotted figure(s). Use for making changes.
%
% Last revised for AcCoRD LATEST_VERSION
%
% Revision history:
%
% Revision LATEST_VERSION
% - Created file
%
% Created 2016-05-19

%% Load Simulation Output
load(fileToLoad, 'config', 'data');

%% Confirm Size of Molecule Arrays
numFrames = length(observationToPlot);
numPassiveObservers = length(passiveActorToPlot);
numMolPropStruct = length(customMolProp);
numMolToPlotArray = length(molToPlot);
if ~isempty(customMolProp) && numMolPropStruct ~= numPassiveObservers
    warning('Incorrect number of custom molecule property structures defined.\n');
    warning('Structure array should have same length as number of passive actors whose observations are being recorded.\n');
    warning('Copying first structure in customMolProp.\n');
    customMolProp = repmat(customMolProp(1),1,numPassiveObservers);
end
if numMolToPlotArray ~= numPassiveObservers
    warning('Incorrect number of molecule plotting arrays defined.\n');
    warning('Cell array should have same length as number of passive actors whose observations are being recorded.\n');
    warning('Copying first array in molToPlot.\n');
    molToPlot = repmat(molToPlot{1},1,numPassiveObservers);
end

%% Load Default Display Properties and Apply Specified Changes
figureProp = accordBuildFigureStruct(customFigProp);
axesProp = accordBuildAxesStruct(customAxesProp);
regionDispStruct = accordBuildDispStruct(regionToPlot, customRegionProp);
actorDispStruct = accordBuildDispStruct(actorToPlot, customActorProp);
molStructArray = accordBuildMarkerStruct(numPassiveObservers, molToPlot, customMolProp);

if bMakeVideo
    %% Plot Static Environment (Video Background)
    [hFig, hAxes] = accordPlotEnvironment(config, axesProp, figureProp, ...
        regionDispStruct, actorDispStruct, scale);

    %% Create and Open Video Object
    videoObj = accordInitializeVideo(videoName, videoFormat, customVideoProp);
else
    %% Generating Series of Figures Instead of a Video. Plot Empty Environment
    hFig = zeros(1,1+numFrames);
    hAxes = zeros(1,1+numFrames);
    [hFig(1), hAxes(1)] = accordPlotEnvironment(config, axesProp, figureProp, ...
        regionDispStruct, actorDispStruct, scale);
end

%% Make the Movie
% Assume that number of observations of first actor is same as number for
% all other passive actors being recorded
numObs = length(data.passiveRecordCount{passiveActorToPlot(1)}(curRepeat,molToPlot{1},:));
hPoints = cell(1,numPassiveObservers);
for i = 1:numPassiveObservers
    hPoints{i} = length(molToPlot{i});
end

for i = 1:numFrames
    if observationToPlot(i) > numObs
        % Assume that frame indexing is indexing and we have reached the
        % end of the simulation
        break
    else
        if bMakeVideo
            curAxes = hAxes;
        else
            [curFig, curAxes] = accordPlotEnvironment(config, axesProp, figureProp, ...
                regionDispStruct, actorDispStruct, scale);
            hAxes(i+1) = curAxes;
            hFig(i+1) = curFig;
        end
        % Plot all of the specified molecules
        for j = 1:numPassiveObservers
            hPoints{j} = accordPlotSingleObservation(curAxes, data, ...
                passiveActorToPlot(j), molStructArray{j}, ...
                observationToPlot(i), curRepeat, scale);
        end
        if bMakeVideo
            % Capture frame and add to video
            drawnow
            frame = getframe;
            writeVideo(videoObj,frame);
            % Remove plots of molecules
            for j = 1:numPassiveObservers
                delete(hPoints{j});
            end
        end
    end
end

%% Cleanup
if bMakeVideo
    close(videoObj)
    annotation(hFig, 'textbox', [0.2 0.4 0.1 0.1], ...
        'String', 'Video Completed!');
end